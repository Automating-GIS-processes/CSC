{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Point in Polygon & Intersect\n",
    "\n",
    "Finding out if a certain point is located inside or outside of an area,\n",
    "or finding out if a line intersects with another line or polygon are\n",
    "fundamental geospatial operations that are often used e.g. to select\n",
    "data based on location. Such spatial queries are one of the typical\n",
    "first steps of the workflow when doing spatial analysis. Performing a\n",
    "spatial join (will be introduced later) between two spatial datasets is\n",
    "one of the most typical applications where Point in Polygon (PIP) query\n",
    "is used.\n",
    "\n",
    "### Download data\n",
    "\n",
    "For the lesson four **download data package from** [here](https://github.com/AutoGIS/data/raw/master/CSC/L4_data.zip).\n",
    "\n",
    "The data package contains a KML-file called `PKS_suuralue.kml`, `addresses.shp`, and `Vaestotietoruudukko_2015.shp`.\n",
    "\n",
    "## How to check if point is inside a polygon?\n",
    "\n",
    "Computationally, detecting if a point is inside a polygon is most commonly done using a specific formula called [Ray Casting algorithm](https://en.wikipedia.org/wiki/Point_in_polygon#Ray_casting_algorithm).\n",
    "Luckily, we do not need to create such a function ourselves for\n",
    "conducting the Point in Polygon (PIP) query. Instead, we can take\n",
    "advantage of [Shapely's binary predicates](http://toblerity.org/shapely/manual.html#binary-predicates)\n",
    "that can evaluate the topolocical relationships between geographical\n",
    "objects, such as the PIP as we're interested here.\n",
    "\n",
    "There are basically two ways of conducting PIP in Shapely:\n",
    "\n",
    "1. using a function called\n",
    "   [.within()](http://toblerity.org/shapely/manual.html#object.within)\n",
    "   that checks if a point is within a polygon\n",
    "2. using a function called\n",
    "   [.contains()](http://toblerity.org/shapely/manual.html#object.contains)_\n",
    "   that checks if a polygon contains a point\n",
    "\n",
    "Notice: even though we are talking here about **Point** in Polygon\n",
    "operation, it is also possible to check if a LineString or Polygon is\n",
    "inside another Polygon.\n",
    "\n",
    "-  Let's first create a Polygon using a list of coordinate-tuples and a\n",
    "   couple of Point objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "POINT (24.952242 60.1696017)\n",
      "POINT (24.976567 60.16125)\n",
      "POLYGON ((24.950899 60.169158, 24.953492 60.169158, 24.95351 60.170104, 24.950958 60.16999, 24.950899 60.169158))\n"
     ]
    }
   ],
   "source": [
    "from shapely.geometry import Point, Polygon\n",
    "\n",
    "# Create Point objects\n",
    "p1 = Point(24.952242, 60.1696017)\n",
    "p2 = Point(24.976567, 60.1612500)\n",
    "\n",
    "# Create a Polygon\n",
    "coords = [(24.950899, 60.169158), (24.953492, 60.169158), (24.953510, 60.170104), (24.950958, 60.169990)]\n",
    "poly = Polygon(coords)\n",
    "\n",
    "# Let's check what we have\n",
    "print(p1)\n",
    "print(p2)\n",
    "print(poly)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Let's check if those points are ``within`` the polygon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if p1 is within the polygon using the within function\n",
    "p1.within(poly)\n",
    "\n",
    "# Check if p2 is within the polygon\n",
    "p2.within(poly)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Okey, so we can see that the first point seems to be inside that polygon\n",
    "and the other one doesn't.\n",
    "\n",
    "-  In fact, the first point is close to the center of the polygon as we\n",
    "   can see:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "POINT (24.952242 60.1696017)\n",
      "POINT (24.95224242849236 60.16960179038188)\n"
     ]
    }
   ],
   "source": [
    "# Our point\n",
    "print(p1)\n",
    "\n",
    "# The centroid\n",
    "print(poly.centroid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "-  It is also possible to do PIP other way around, i.e. to check if\n",
    "   polygon contains a point:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Does polygon contain p1?\n",
    "poly.contains(p1)\n",
    "\n",
    "# Does polygon contain p2?\n",
    "poly.contains(p2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Thus, both ways of checking the spatial relationship results in the same way.\n",
    "\n",
    "Which one should you use then? Well, it depends:\n",
    "\n",
    "-  if you have many points and just one polygon and you try to find out\n",
    "   which one of them is inside the polygon:\n",
    "\n",
    "   -  you need to iterate over the points and check one at a time if it\n",
    "      is **within()** the polygon specified\n",
    "\n",
    "-  if you have many polygons and just one point and you want to find out\n",
    "   which polygon contains the point\n",
    "\n",
    "    -  you need to iterate over the polygons until you find a polygon that\n",
    "       **contains()** the point specified (assuming there are no overlapping\n",
    "       polygons)\n",
    "        \n",
    "## Intersect\n",
    "\n",
    "\n",
    "Another typical geospatial operation is to see if a geometry\n",
    "[intersect](http://toblerity.org/shapely/manual.html#object.intersects)\n",
    "or [touches](http://toblerity.org/shapely/manual.html#object.touches)\n",
    "another one. The difference between these two is that:\n",
    "\n",
    "-  if objects intersect, the boundary and interior of an object needs to\n",
    "   intersect in any way with those of the other.\n",
    "\n",
    "-  If an object touches the other one, it is only necessary to have (at\n",
    "   least) a single point of their boundaries in common but their\n",
    "   interiors shoud NOT intersect.\n",
    "\n",
    "Let's try these out.\n",
    "\n",
    "-  Let's create two LineStrings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "from shapely.geometry import LineString, MultiLineString\n",
    "\n",
    "# Create two lines\n",
    "line_a = LineString([(0, 0), (1, 1)])\n",
    "line_b = LineString([(1, 1), (0, 2)])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "-  Let's see if they intersect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "line_a.intersects(line_b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "-  Do they also touch each other?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "line_a.touches(line_b)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Indeed, they do and we can see this by plotting the features together"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100.0\" height=\"100.0\" viewBox=\"-0.08 -0.08 1.1600000000000001 2.16\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,2.0)\"><g><polyline fill=\"none\" stroke=\"#66cc99\" stroke-width=\"0.0432\" points=\"0.0,0.0 1.0,1.0\" opacity=\"0.8\" /><polyline fill=\"none\" stroke=\"#66cc99\" stroke-width=\"0.0432\" points=\"1.0,1.0 0.0,2.0\" opacity=\"0.8\" /></g></g></svg>"
      ],
      "text/plain": [
       "<shapely.geometry.multilinestring.MultiLineString at 0x13cf55b6cc0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a MultiLineString\n",
    "multi_line = MultiLineString([line_a, line_b])\n",
    "multi_line"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Thus, the ``line_b`` continues from the same node ( (1,1) ) where ``line_a`` ends.\n",
    "\n",
    "However, if the lines overlap fully, they don't touch due to the spatial relationship rule, as we can see:\n",
    "\n",
    "- Check if line_a touches itself"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Does the line touch with itself?\n",
    "line_a.touches(line_a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "- It does not. However, it does intersect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Does the line intersect with itself?\n",
    "line_a.intersects(line_a)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Point in Polygon using Geopandas\n",
    "\n",
    "Next we will do a practical example where we check which of the addresses from previous tutorial are located in Southern district of Helsinki. We will use a KML-file that has the Polygons for districts of Helsinki Region (data openly available from [Helsinki Region Infoshare](http://www.hri.fi/fi/dataset/paakaupunkiseudun-aluejakokartat).\n",
    "\n",
    "- Let's start by reading the addresses from the Shapefile that we saved earlier."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "fp = \"L4_data/addresses.shp\"\n",
    "data = gpd.read_file(fp)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "\n",
    "### Reading KML-files in Geopandas\n",
    "\n",
    "It is possible to read the data from KML-file in a similar manner as Shapefile. However, we need to first, enable the KML-driver which is not enabled by default (because KML-files can contain unsupported data structures, nested folders etc., hence be careful when reading KML-files).\n",
    "\n",
    "- Let's enable the read and write functionalities for KML-driver by passing ``'rw'`` to whitelist of fiona's supported drivers:\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "import matplotlib.pyplot as plt\n",
    "gpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Now we should be able to read a KML file with Geopandas.\n",
    "\n",
    "- Let's read the data from a following KML -file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Description</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Suur-Espoonlahti</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.775059677807 60.1090604462157 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suur-Kauklahti</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.6157775254076 60.1725681273527 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Vanha-Espoo</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.6757633262026 60.2120070032819 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Pohjois-Espoo</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.767921197401 60.2691954732391 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Suur-Matinkylä</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.7536131356802 60.1663051341717 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Kauniainen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.6907528033566 60.2195779731868 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Suur-Leppävaara</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.797472695835 60.2082651196077 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Suur-Tapiola</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.8443596422129 60.1659790707387 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Myyrmäki</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.8245867448802 60.2902531157585 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Kivistö</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9430919106369 60.3384471629062 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Eteläinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.7827651307035 60.09997268858 0,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Kaakkoinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.8480782099727 60.0275589731893 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Keskinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9085548098731 60.2082029641503 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Läntinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.832174555671 60.2516121985945 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Pohjoinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.8992644865152 60.2689368800439 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Koillinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9722813313308 60.2432476462193 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Aviapolis</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9430919106369 60.3384471629062 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Tikkurila</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9764047156358 60.2896890295612 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Koivukylä</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9942315864552 60.3329637072809 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Itäinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((25.0351655840904 60.23627484214 0,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Östersundom</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((25.233518559787 60.2565486562817 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Hakunila</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((25.0847165922124 60.2724847557756 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Korso</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((25.1238010972777 60.341907177167 0...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Name Description  \\\n",
       "0   Suur-Espoonlahti               \n",
       "1     Suur-Kauklahti               \n",
       "2        Vanha-Espoo               \n",
       "3      Pohjois-Espoo               \n",
       "4     Suur-Matinkylä               \n",
       "5         Kauniainen               \n",
       "6    Suur-Leppävaara               \n",
       "7       Suur-Tapiola               \n",
       "8           Myyrmäki               \n",
       "9            Kivistö               \n",
       "10         Eteläinen               \n",
       "11        Kaakkoinen               \n",
       "12          Keskinen               \n",
       "13          Läntinen               \n",
       "14         Pohjoinen               \n",
       "15         Koillinen               \n",
       "16         Aviapolis               \n",
       "17         Tikkurila               \n",
       "18         Koivukylä               \n",
       "19           Itäinen               \n",
       "20       Östersundom               \n",
       "21          Hakunila               \n",
       "22             Korso               \n",
       "\n",
       "                                             geometry  \n",
       "0   POLYGON Z ((24.775059677807 60.1090604462157 0...  \n",
       "1   POLYGON Z ((24.6157775254076 60.1725681273527 ...  \n",
       "2   POLYGON Z ((24.6757633262026 60.2120070032819 ...  \n",
       "3   POLYGON Z ((24.767921197401 60.2691954732391 0...  \n",
       "4   POLYGON Z ((24.7536131356802 60.1663051341717 ...  \n",
       "5   POLYGON Z ((24.6907528033566 60.2195779731868 ...  \n",
       "6   POLYGON Z ((24.797472695835 60.2082651196077 0...  \n",
       "7   POLYGON Z ((24.8443596422129 60.1659790707387 ...  \n",
       "8   POLYGON Z ((24.8245867448802 60.2902531157585 ...  \n",
       "9   POLYGON Z ((24.9430919106369 60.3384471629062 ...  \n",
       "10  POLYGON Z ((24.7827651307035 60.09997268858 0,...  \n",
       "11  POLYGON Z ((24.8480782099727 60.0275589731893 ...  \n",
       "12  POLYGON Z ((24.9085548098731 60.2082029641503 ...  \n",
       "13  POLYGON Z ((24.832174555671 60.2516121985945 0...  \n",
       "14  POLYGON Z ((24.8992644865152 60.2689368800439 ...  \n",
       "15  POLYGON Z ((24.9722813313308 60.2432476462193 ...  \n",
       "16  POLYGON Z ((24.9430919106369 60.3384471629062 ...  \n",
       "17  POLYGON Z ((24.9764047156358 60.2896890295612 ...  \n",
       "18  POLYGON Z ((24.9942315864552 60.3329637072809 ...  \n",
       "19  POLYGON Z ((25.0351655840904 60.23627484214 0,...  \n",
       "20  POLYGON Z ((25.233518559787 60.2565486562817 0...  \n",
       "21  POLYGON Z ((25.0847165922124 60.2724847557756 ...  \n",
       "22  POLYGON Z ((25.1238010972777 60.341907177167 0...  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filepath to KML file\n",
    "fp = \"L4_data/PKS_suuralue.kml\"\n",
    "\n",
    "polys = gpd.read_file(fp, driver='KML')\n",
    "polys"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Nice, now we can see that we have 22 districts in our area. We are interested in an area that is called ``Eteläinen`` (*'Southern'* in english).\n",
    "\n",
    "- Let's select that one and see where it is located, and plot also the points on top of the map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x16df088e7f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Select 'Eteläinen' district (Southern)\n",
    "southern = polys.loc[polys['Name']=='Eteläinen']\n",
    "southern.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# Create plot\n",
    "ax = polys.plot(facecolor='gray');\n",
    "southern.plot(ax=ax, facecolor='red');\n",
    "data.plot(ax=ax, color='blue', markersize=5);\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Okey, so we can see that, indeed, certain points are within the selected red Polygon.\n",
    "\n",
    "Let's find out which one of them are located within the Polygon. Hence, we are conducting a Point in Polygon query.\n",
    "\n",
    "- Let's first enable shapely.speedups which makes some of the spatial queries running faster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import shapely.speedups\n",
    "shapely.speedups.enable()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "- Let's check which Points are within the `southern` Polygon. Notice, that here we check if the Points are `within` the **geometry** of the `southern` GeoDataFrame. Hence, we use the `loc[0, 'geometry']` to parse the actual Polygon geometry object from the GeoDataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0      True\n",
      "1      True\n",
      "2     False\n",
      "3     False\n",
      "4      True\n",
      "5     False\n",
      "6     False\n",
      "7     False\n",
      "8     False\n",
      "9     False\n",
      "10     True\n",
      "11    False\n",
      "12    False\n",
      "13    False\n",
      "14    False\n",
      "15    False\n",
      "16    False\n",
      "17    False\n",
      "18    False\n",
      "19    False\n",
      "20    False\n",
      "21    False\n",
      "22    False\n",
      "23    False\n",
      "24    False\n",
      "25    False\n",
      "26    False\n",
      "27    False\n",
      "28    False\n",
      "29    False\n",
      "30     True\n",
      "31     True\n",
      "32     True\n",
      "33     True\n",
      "34    False\n",
      "dtype: bool\n"
     ]
    }
   ],
   "source": [
    "# Create a mask\n",
    "pip_mask = data.within(southern.loc[0, 'geometry'])\n",
    "print(pip_mask)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "As we can see, we now have an array of boolean values for each row, where the result is ``True``\n",
    "if Point was inside the Polygon, and ``False`` if it was not.\n",
    "\n",
    "- We can now use this mask array to select the Points that are inside the Polygon. Selecting data with this kind of mask array (of boolean values) is\n",
    "  easy by passing the array inside the ``loc`` indexing function of Pandas.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>address</th>\n",
       "      <th>id</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Kampinkuja 1, 00100 Helsinki, Finland</td>\n",
       "      <td>1001</td>\n",
       "      <td>POINT (24.9301701 60.1683731)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Kaivokatu 8, 00101 Helsinki, Finland</td>\n",
       "      <td>1002</td>\n",
       "      <td>POINT (24.9418933 60.1698665)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Tyynenmerenkatu 9, 00220 Helsinki, Finland</td>\n",
       "      <td>1005</td>\n",
       "      <td>POINT (24.9214846 60.1565781)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Rautatientori 1, 00100 Helsinki, Finland</td>\n",
       "      <td>1011</td>\n",
       "      <td>POINT (24.94251 60.1711874)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Urho Kekkosen katu 1, 00100 Helsinki, Finland</td>\n",
       "      <td>1031</td>\n",
       "      <td>POINT (24.9337569 60.1694809)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Gräsviksgatan 17, 00101 Helsingfors, Finland</td>\n",
       "      <td>1032</td>\n",
       "      <td>POINT (24.9250072 60.16500139999999)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Stillahavsgatan 3, 00220 Helsingfors, Finland</td>\n",
       "      <td>1033</td>\n",
       "      <td>POINT (24.9214046 60.159069)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Vilhelmsgatan 4, 00101 Helsingfors, Finland</td>\n",
       "      <td>1034</td>\n",
       "      <td>POINT (24.9468514 60.1719108)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          address    id  \\\n",
       "0           Kampinkuja 1, 00100 Helsinki, Finland  1001   \n",
       "1            Kaivokatu 8, 00101 Helsinki, Finland  1002   \n",
       "4      Tyynenmerenkatu 9, 00220 Helsinki, Finland  1005   \n",
       "10       Rautatientori 1, 00100 Helsinki, Finland  1011   \n",
       "30  Urho Kekkosen katu 1, 00100 Helsinki, Finland  1031   \n",
       "31   Gräsviksgatan 17, 00101 Helsingfors, Finland  1032   \n",
       "32  Stillahavsgatan 3, 00220 Helsingfors, Finland  1033   \n",
       "33    Vilhelmsgatan 4, 00101 Helsingfors, Finland  1034   \n",
       "\n",
       "                                geometry  \n",
       "0          POINT (24.9301701 60.1683731)  \n",
       "1          POINT (24.9418933 60.1698665)  \n",
       "4          POINT (24.9214846 60.1565781)  \n",
       "10           POINT (24.94251 60.1711874)  \n",
       "30         POINT (24.9337569 60.1694809)  \n",
       "31  POINT (24.9250072 60.16500139999999)  \n",
       "32          POINT (24.9214046 60.159069)  \n",
       "33         POINT (24.9468514 60.1719108)  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Select points that are within Polygon\n",
    "pip_data = data.loc[pip_mask]\n",
    "pip_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Let's finally confirm that our Point in Polygon query worked as it should by plotting the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nR0d5+eWXee+990qqt1QxCIVCpFIp4vE4k5OTjI+P62oFWVdXRyqVmvcEaDKZsNvtBY3LCyGyHQjm\nGrfh9XrxeDzE43F6e3vn/F0uJaTY0tIyYw+p2JR6OFRL/YFAACFEUbslzIfL5eKb3/xmQWuGci1o\nLWsjyjA+Ps6RI0d46623dL+RqCWZtGiYqjUwmUzZ+TGZvmLncm71+vnfSykxm80L/uD7fD6sVuuC\nalbq6ury3r6puroat9tNIpGgr68Pj8eTcyaUyWTC7XZjtVoZGRnB5XJhtVrp7e1dUlW/wWDQtGv0\nfPVOesZms5FOpzWd26XHWqydO3eyZ8+egj2+MqJZSKVSfPjhh7z55pslfWVXSjQ2NubUWbqqqgq3\n273oE91Sr3YdDgc+nw+AgYGBCza1tV6NZCiE6eZCc3Mz4XBYdwMYzWYz9fX1F1wkZdpbJZNJEokE\nVVVVmmf+WSwWgsGgLt5HGQwGA3/zN39TsL0z1eJnFoxGIxs3bmTjxo309PTwxhtv8O6776qwXQHJ\nbHTPZRKZ8dPt7e1LutLv7OxcUJpzpkbHbDYzNjY2q/mci15W0uFwOOcBdfki8/fRIw0NDTmd2EdH\nR7P7jVrV0Hm9Xt0ZeWaVWIwkjotRUSui2RgdHeUf//Efi/JclUxTU1O2+SRMZaDV1tbS2dlJMpnM\ny3PU1tZeNAZfU1OD0+lkcnJyUWOV9TLV02azEY/Hi7anp8eQ3GIbsJrNZhoaGujv7y9o2x2fz5fN\nTrNarUxOTmra/V8Ika1Xy9wcDgcul4tLLrmkYPtEakWUIy6XS2sJFUFHRwderxer1YrVar2geDMf\n9Pb2zgiheTwevF5vNvU7c1ssXq9XF0aU6ThdjFoVo9Goq87QtbW1WCwWuru7F7VKTSQS2feH3W6n\nqqoKq9VKOp0mGo0yNDS0pAhJIBBgfHxcV50Vli1bxk033ZQdya5HKt6IhBCaFQtWEm63G4/HQ2dn\nZ0FDoe3t7TQ3N2dn7ORz/LaexrEXqwt5ZrSIllgsFurr6xkZGclr1tnExMSsKcxerxeXy4XRaCQe\njzM8PJzT3z4QCGQTfkZGRvLWlHapCCGorq7WWsZFqXgjgqmrPmVE+cfn82G32zEYDHR0dBRlnyWd\nThdsP6Ovrw+Xy6WLFUKx9hoyJ+tMFqGUktHR0YKeZKurqxkeHs6aYDQaLWpy0dDQ0AWvL7N6slgs\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x16df0ae1240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot\n",
    "ax = polys.plot(facecolor='gray')\n",
    "southern.plot(ax=ax, facecolor='red')\n",
    "pip_data.plot(ax=ax, color='gold', markersize=2)\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Perfect! Now we only have the (golden) points that, indeed, are inside the red Polygon which is exactly what we wanted!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
