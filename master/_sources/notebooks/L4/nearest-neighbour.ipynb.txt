{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Nearest Neighbour Analysis\n",
    "\n",
    "\n",
    "One commonly used GIS task is to be able to find the nearest neighbour. For instance, you might have a single Point object\n",
    "representing your home location, and then another set of locations representing e.g. public transport stops. Then, quite typical question is *\"which of the stops is closest one to my home?\"*\n",
    "This is a typical nearest neighbour analysis, where the aim is to find the closest geometry to another geometry.\n",
    "\n",
    "In Python this kind of analysis can be done with shapely function called ``nearest_points()`` that [returns a tuple of the nearest points in the input geometries](https://shapely.readthedocs.io/en/latest/manual.html#shapely.ops.nearest_points).\n",
    "\n",
    "## Nearest point using Shapely\n",
    "\n",
    "\n",
    "Let's start by testing how we can find the nearest Point using the ``nearest_points()`` function of Shapely.\n",
    "\n",
    "Let's create an origin Point and a few destination Points and find out the closest destination.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from shapely.geometry import Point, MultiPoint\n",
    "from shapely.ops import nearest_points\n",
    "\n",
    "orig = Point(1, 1.67)\n",
    "dest1, dest2, dest3 = Point(0, 1.45), Point(2, 2), Point(0, 2.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To be able to find out the closest destination point from the origin, we need to create a MultiPoint object from the destination points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MULTIPOINT (0 1.45, 2 2, 0 2.5)\n"
     ]
    }
   ],
   "source": [
    "destinations = MultiPoint([dest1, dest2, dest3])\n",
    "print(destinations)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okey, now we can see that all the destination points are represented as a single MultiPoint object.\n",
    "\n",
    "- Now we can find out the nearest destination point by using ``nearest_points()`` function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(<shapely.geometry.point.Point object at 0x0000026ECF721F98>, <shapely.geometry.point.Point object at 0x0000026ECFB4A9E8>)\n",
      "POINT (1 1.67)\n",
      "POINT (0 1.45)\n"
     ]
    }
   ],
   "source": [
    "nearest_geoms = nearest_points(orig, destinations)\n",
    "near_idx0 = nearest_geoms[0]\n",
    "near_idx1 = nearest_geoms[1]\n",
    "print(nearest_geoms)\n",
    "print(near_idx0)\n",
    "print(near_idx1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see the ``nearest_points()`` function returns a tuple of geometries where the first item is the geometry\n",
    "of our origin point and the second item (at index 1) is the actual nearest geometry from the destination points.\n",
    "Hence, the closest destination point seems to be the one located at coordinates (0, 1.45).\n",
    "\n",
    "This is the basic logic how we can find the nearest point from a set of points."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nearest points using Geopandas\n",
    "\n",
    "Of course, the previous example is not really useful yet. Hence, next I show, how it is possible to find nearest points\n",
    "from a set of origin points to a set of destination points using GeoDataFrames. If you don't already have the addresses and PKS_suuralueet.kml datasets,\n",
    "you can find and download them from :doc:`geocoding <geocoding>` and :doc:`Point in Polygon <point-in-polygon>` tutorials.\n",
    "\n",
    "- First we need to create a function that takes advantage of the previous function but is tailored to work with two GeoDataFrames.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nearest(row, geom_union, df1, df2, geom1_col='geometry', geom2_col='geometry', src_column=None):\n",
    "    \"\"\"Find the nearest point and return the corresponding value from specified column.\"\"\"\n",
    "    \n",
    "    # Find the geometry that is closest\n",
    "    nearest = df2[geom2_col] == nearest_points(row[geom1_col], geom_union)[1]\n",
    "    \n",
    "    # Get the corresponding value from df2 (matching is based on the geometry)\n",
    "    value = df2[nearest][src_column].get_values()[0]\n",
    "    \n",
    "    return value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we read the address data and the Helsinki districts data and find out the closest address to the centroid of each district."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define filepaths\n",
    "fp1 = \"L4_data/PKS_suuralue.kml\"\n",
    "fp2 = \"L4_data/addresses.shp\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "gpd.io.file.fiona.drvsupport.supported_drivers['KML'] = 'rw'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read in data with geopandas\n",
    "df1 = gpd.read_file(fp1, driver='KML')\n",
    "df2 = gpd.read_file(fp2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create unary union from Points, which basically creates a MultiPoint object from the Point geometries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MULTIPOINT (24.8609335 60.22401389999999, 24.86186 60.2485471, 24.8718598 60.22243630000001, 24.877383 60.240163, 24.8840504 60.2306474, 24.893153 60.2177823, 24.9214046 60.159069, 24.9214846 60.1565781, 24.9250072 60.16500139999999, 24.9301701 60.1683731, 24.9334051 60.1986856, 24.9337569 60.1694809, 24.9418933 60.1698665, 24.94251 60.1711874, 24.9468514 60.1719108, 24.9483202 60.22163339999999, 24.9494874 60.1793862, 24.9609122 60.18789030000001, 24.9670533 60.2291135, 24.9774004 60.18735880000001, 24.9934979 60.2436961, 25.0068399 60.18837519999999, 25.0125655 60.25149829999999, 25.0291078 60.2633799, 25.0291263 60.19413939999999, 25.035855 60.2753891, 25.040583 60.24444239999999, 25.042239 60.2033879, 25.0756547 60.225599, 25.0778094 60.20966609999999, 25.0816923 60.23489060000001, 25.0919641 60.21448089999999, 25.1080054 60.2382054, 25.1204966 60.20548979999999, 25.1424936 60.20751019999999)\n"
     ]
    }
   ],
   "source": [
    "unary_union = df2.unary_union\n",
    "print(unary_union)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate the centroids for each district area."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Description</th>\n",
       "      <th>geometry</th>\n",
       "      <th>centroid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Suur-Espoonlahti</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.775059677807 60.1090604462157 0...</td>\n",
       "      <td>POINT (24.76754037242762 60.0440879200116)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suur-Kauklahti</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.6157775254076 60.1725681273527 ...</td>\n",
       "      <td>POINT (24.57415010885406 60.19764302289445)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Vanha-Espoo</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.6757633262026 60.2120070032819 ...</td>\n",
       "      <td>POINT (24.60400724339237 60.25253297356344)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Pohjois-Espoo</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.767921197401 60.2691954732391 0...</td>\n",
       "      <td>POINT (24.68682879841453 60.30649462398335)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Suur-Matinkyl√§</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.7536131356802 60.1663051341717 ...</td>\n",
       "      <td>POINT (24.76063843560942 60.15018263640097)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Name Description  \\\n",
       "0  Suur-Espoonlahti               \n",
       "1    Suur-Kauklahti               \n",
       "2       Vanha-Espoo               \n",
       "3     Pohjois-Espoo               \n",
       "4    Suur-Matinkyl√§               \n",
       "\n",
       "                                            geometry  \\\n",
       "0  POLYGON Z ((24.775059677807 60.1090604462157 0...   \n",
       "1  POLYGON Z ((24.6157775254076 60.1725681273527 ...   \n",
       "2  POLYGON Z ((24.6757633262026 60.2120070032819 ...   \n",
       "3  POLYGON Z ((24.767921197401 60.2691954732391 0...   \n",
       "4  POLYGON Z ((24.7536131356802 60.1663051341717 ...   \n",
       "\n",
       "                                      centroid  \n",
       "0   POINT (24.76754037242762 60.0440879200116)  \n",
       "1  POINT (24.57415010885406 60.19764302289445)  \n",
       "2  POINT (24.60400724339237 60.25253297356344)  \n",
       "3  POINT (24.68682879841453 60.30649462398335)  \n",
       "4  POINT (24.76063843560942 60.15018263640097)  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['centroid'] = df1.centroid\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okey now we are ready to use our function and find closest Points (taking the value from id column) from df2 to df1 centroids"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Description</th>\n",
       "      <th>geometry</th>\n",
       "      <th>centroid</th>\n",
       "      <th>nearest_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Suur-Espoonlahti</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.775059677807 60.1090604462157 0...</td>\n",
       "      <td>POINT (24.76754037242762 60.0440879200116)</td>\n",
       "      <td>1005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Suur-Kauklahti</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.6157775254076 60.1725681273527 ...</td>\n",
       "      <td>POINT (24.57415010885406 60.19764302289445)</td>\n",
       "      <td>1020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Vanha-Espoo</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.6757633262026 60.2120070032819 ...</td>\n",
       "      <td>POINT (24.60400724339237 60.25253297356344)</td>\n",
       "      <td>1017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Pohjois-Espoo</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.767921197401 60.2691954732391 0...</td>\n",
       "      <td>POINT (24.68682879841453 60.30649462398335)</td>\n",
       "      <td>1017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Suur-Matinkyl√§</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.7536131356802 60.1663051341717 ...</td>\n",
       "      <td>POINT (24.76063843560942 60.15018263640097)</td>\n",
       "      <td>1020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Kauniainen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.6907528033566 60.2195779731868 ...</td>\n",
       "      <td>POINT (24.71357964516679 60.21457067576294)</td>\n",
       "      <td>1020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Suur-Lepp√§vaara</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.797472695835 60.2082651196077 0...</td>\n",
       "      <td>POINT (24.77910492134015 60.22913609608545)</td>\n",
       "      <td>1020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Suur-Tapiola</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.8443596422129 60.1659790707387 ...</td>\n",
       "      <td>POINT (24.79937514852226 60.17816655223976)</td>\n",
       "      <td>1020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Myyrm√§ki</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.8245867448802 60.2902531157585 ...</td>\n",
       "      <td>POINT (24.81763652589348 60.27819504217397)</td>\n",
       "      <td>1017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Kivist√∂</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9430919106369 60.3384471629062 ...</td>\n",
       "      <td>POINT (24.84180592296876 60.34358057021768)</td>\n",
       "      <td>1017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Etel√§inen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.7827651307035 60.09997268858 0,...</td>\n",
       "      <td>POINT (24.90837930087519 60.10976339578206)</td>\n",
       "      <td>1005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Kaakkoinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.8480782099727 60.0275589731893 ...</td>\n",
       "      <td>POINT (25.05325169482274 60.05155324331345)</td>\n",
       "      <td>1029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Keskinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9085548098731 60.2082029641503 ...</td>\n",
       "      <td>POINT (24.95489633637751 60.20067297308771)</td>\n",
       "      <td>1027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>L√§ntinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.832174555671 60.2516121985945 0...</td>\n",
       "      <td>POINT (24.87614770011878 60.21754287289237)</td>\n",
       "      <td>1010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Pohjoinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.8992644865152 60.2689368800439 ...</td>\n",
       "      <td>POINT (24.94156264995636 60.24654213027523)</td>\n",
       "      <td>1014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Koillinen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9722813313308 60.2432476462193 ...</td>\n",
       "      <td>POINT (25.02148999795968 60.25026309396886)</td>\n",
       "      <td>1015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Aviapolis</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9430919106369 60.3384471629062 ...</td>\n",
       "      <td>POINT (24.93554952483983 60.30204064147746)</td>\n",
       "      <td>1018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Tikkurila</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9764047156358 60.2896890295612 ...</td>\n",
       "      <td>POINT (25.03931014564627 60.29804037805193)</td>\n",
       "      <td>1008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Koivukyl√§</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((24.9942315864552 60.3329637072809 ...</td>\n",
       "      <td>POINT (25.05766837333244 60.32582581576258)</td>\n",
       "      <td>1008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>It√§inen</td>\n",
       "      <td></td>\n",
       "      <td>POLYGON Z ((25.0351655840904 60.23627484214 0,...</td>\n",
       "      <td>POINT (25.12590828372607 60.20923259104367)</td>\n",
       "      <td>1035</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Name Description  \\\n",
       "0   Suur-Espoonlahti               \n",
       "1     Suur-Kauklahti               \n",
       "2        Vanha-Espoo               \n",
       "3      Pohjois-Espoo               \n",
       "4     Suur-Matinkyl√§               \n",
       "5         Kauniainen               \n",
       "6    Suur-Lepp√§vaara               \n",
       "7       Suur-Tapiola               \n",
       "8           Myyrm√§ki               \n",
       "9            Kivist√∂               \n",
       "10         Etel√§inen               \n",
       "11        Kaakkoinen               \n",
       "12          Keskinen               \n",
       "13          L√§ntinen               \n",
       "14         Pohjoinen               \n",
       "15         Koillinen               \n",
       "16         Aviapolis               \n",
       "17         Tikkurila               \n",
       "18         Koivukyl√§               \n",
       "19           It√§inen               \n",
       "\n",
       "                                             geometry  \\\n",
       "0   POLYGON Z ((24.775059677807 60.1090604462157 0...   \n",
       "1   POLYGON Z ((24.6157775254076 60.1725681273527 ...   \n",
       "2   POLYGON Z ((24.6757633262026 60.2120070032819 ...   \n",
       "3   POLYGON Z ((24.767921197401 60.2691954732391 0...   \n",
       "4   POLYGON Z ((24.7536131356802 60.1663051341717 ...   \n",
       "5   POLYGON Z ((24.6907528033566 60.2195779731868 ...   \n",
       "6   POLYGON Z ((24.797472695835 60.2082651196077 0...   \n",
       "7   POLYGON Z ((24.8443596422129 60.1659790707387 ...   \n",
       "8   POLYGON Z ((24.8245867448802 60.2902531157585 ...   \n",
       "9   POLYGON Z ((24.9430919106369 60.3384471629062 ...   \n",
       "10  POLYGON Z ((24.7827651307035 60.09997268858 0,...   \n",
       "11  POLYGON Z ((24.8480782099727 60.0275589731893 ...   \n",
       "12  POLYGON Z ((24.9085548098731 60.2082029641503 ...   \n",
       "13  POLYGON Z ((24.832174555671 60.2516121985945 0...   \n",
       "14  POLYGON Z ((24.8992644865152 60.2689368800439 ...   \n",
       "15  POLYGON Z ((24.9722813313308 60.2432476462193 ...   \n",
       "16  POLYGON Z ((24.9430919106369 60.3384471629062 ...   \n",
       "17  POLYGON Z ((24.9764047156358 60.2896890295612 ...   \n",
       "18  POLYGON Z ((24.9942315864552 60.3329637072809 ...   \n",
       "19  POLYGON Z ((25.0351655840904 60.23627484214 0,...   \n",
       "\n",
       "                                       centroid  nearest_id  \n",
       "0    POINT (24.76754037242762 60.0440879200116)        1005  \n",
       "1   POINT (24.57415010885406 60.19764302289445)        1020  \n",
       "2   POINT (24.60400724339237 60.25253297356344)        1017  \n",
       "3   POINT (24.68682879841453 60.30649462398335)        1017  \n",
       "4   POINT (24.76063843560942 60.15018263640097)        1020  \n",
       "5   POINT (24.71357964516679 60.21457067576294)        1020  \n",
       "6   POINT (24.77910492134015 60.22913609608545)        1020  \n",
       "7   POINT (24.79937514852226 60.17816655223976)        1020  \n",
       "8   POINT (24.81763652589348 60.27819504217397)        1017  \n",
       "9   POINT (24.84180592296876 60.34358057021768)        1017  \n",
       "10  POINT (24.90837930087519 60.10976339578206)        1005  \n",
       "11  POINT (25.05325169482274 60.05155324331345)        1029  \n",
       "12  POINT (24.95489633637751 60.20067297308771)        1027  \n",
       "13  POINT (24.87614770011878 60.21754287289237)        1010  \n",
       "14  POINT (24.94156264995636 60.24654213027523)        1014  \n",
       "15  POINT (25.02148999795968 60.25026309396886)        1015  \n",
       "16  POINT (24.93554952483983 60.30204064147746)        1018  \n",
       "17  POINT (25.03931014564627 60.29804037805193)        1008  \n",
       "18  POINT (25.05766837333244 60.32582581576258)        1008  \n",
       "19  POINT (25.12590828372607 60.20923259104367)        1035  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['nearest_id'] = df1.apply(nearest, geom_union=unary_union, df1=df1, df2=df2, geom1_col='centroid', src_column='id', axis=1)\n",
    "df1.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That's it! Now we found the closest point for each centroid and got the ``id`` value from our addresses into the ``df1`` GeoDataFrame.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
